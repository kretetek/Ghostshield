/*********
*
*   GHOSTSHIELD NAVIGATION
*
*/

var dim = false;

function check_menus() {

	if ($(window).width() < 1100) {

		$('#main_nav .submenu').css("margin-left", "0");
		$('#dropDownMenuBG').css("display", "none");
		$('nav.main_nav ul .submenu').css("height", "");

	} else {
	
		$('#main_nav .submenu').css("margin-left", "");
		$('#dropDownMenuBG').css("display", "");
		$('nav.main_nav ul .submenu').css("height", "");
	
	}

}

$(function(){

	var ddActive = false;

	/*h = $('#main_nav_button').html();
	$('#main_nav_button').parent().html('<a href="javascript:$(\'#main_nav > ul\').toggleClass(\'open\');" id="main_nav_button">'+h+'</a>');*/

	$('#nav_products_menu ul.nav_list').each(function(n){
		$(this).addClass("collapsed");
	});

	$('.nav_list_toggle').click(function(evt){
		$("#"+$(this).attr("data-toggle-id")).toggleClass("collapsed");
		if ($("#"+$(this).attr("data-toggle-id")).hasClass("collapsed")) {
			$(this).html($(this).attr("data-show"));
		} else {
			$(this).html($(this).attr("data-hide"));
		}
	});

	$('#main_nav_button').css('cursor','pointer');
	$(document).on('click', '#main_nav_button', function(event){
		event.preventDefault();
	//	console.log("received click on main nav button");
		$(this).toggleClass("open");
		$('#main_nav > ul').toggleClass("open");
		$('#main_nav .submenu').css("margin-left", "0");
		$('#dropDownMenuBG').css("display", "none");
		$(document.body).toggleClass("clip");
		if ($(this).hasClass("open")) {
			$('body').addClass("locked");
		} else $('body').removeClass("locked");
	});

	$('#page_nav_open').css('cursor','pointer');
	$('#page_nav_open').click(function(event){
		event.preventDefault();
		$('#page_nav > ul').toggleClass("open");
	});

	/*$('.page_nav a').click(function(event){
		event.preventDefault();
		$('#page_nav > ul').removeClass("open");
		$('html, body').animate({ scrollTop:$($(this).attr("href")+"_anchor").offset().top+100 }, 1000);
	});*/

	$(window).bind('resize', check_menus);
	
	$(document.body).removeClass("ddActive");
	$(document.body).addClass("ddInactive");

	$('.submenu').scroll(function(data){
		//console.log(data.target.scrollTop);
		$('#dropDownMenuBG').scrollTop(data.target.scrollTop);
	});

	$('.has_submenu').hover(function(){

		if ($(window).width() > 1099) {

			clearTimeout(ddActive);

			$trigger = $(this);
			$target = $('#'+$(this).attr("id")+'_menu');

			xpos = $target.position().left;
			if ($target.hasClass("left")) xpos -= 20;
			if ($target.hasClass("right")) xpos += 20;

			marginLeft = ($target.width()/2 - $trigger.width()/2);
			if ($target.position().left + $target.width() - marginLeft > $(window).width()) {
	//			console.log("menu off screen");
				marginLeft = $target.width() - $trigger.width() - 20;
			}
			marginLeft = '-'+marginLeft+'px';
			
			$('#dropDownMenuBG').scrollTop(0);			
			$target.scrollTop(0);

			$('nav.main_nav ul .submenu').each(function(el){
				$(this).removeClass("left");
				$(this).removeClass("right");
			});

			if ($(document.body).hasClass("ddInactive")) {

				$('#dropDownMenuBG').css({
					'display': 'block',
					'height': $target.height()+'px',
					'width': $target.width()+'px',
					'transform': 'translateX('+xpos+'px) rotate3d(0, 1, 0, 90deg)',
					'margin-left': marginLeft
				});
				$('#ddmbg_top').css({
					'height': ($target.find('.nav_menu_sub0').length ? $target.find('.nav_menu_sub0').outerHeight() : 0) +'px'
				});
				$('#ddmbg_mid').css({
					'height': ($target.find('.nav_menu_sub1').length ? $target.find('.nav_menu_sub1').outerHeight() : 0) +'px'
				});
				$('#ddmbg_bot').css({
					'height': ($target.find('.nav_menu_sub2').length ? $target.find('.nav_menu_sub2').outerHeight() : 0) +'px'
				});
				clearTimeout(ddActive);
				ddActive = setTimeout(function(){
					$(document.body).removeClass("ddInactive");
					$(document.body).addClass("ddActive");
				}, 10);

			} else {

				$('nav.main_nav ul .submenu').each(function(el){
					if ($target.attr("data-num") > $(this).attr("data-num")) {
						$(this).addClass("left");
					} else if ($target.attr("data-num") < $(this).attr("data-num")) {
						$(this).addClass("right");
					}
				});

			}

			if (dim) $('.page_content').addClass("dim");

			$('#dropDownMenuBG').addClass("active");
			$target.addClass("active");

			$('#dropDownMenuBG').css({
				'height': $target.height()+'px',
				'width': $target.width()+'px',
				//'left': $target.position().left+"px",
				'transform': 'translateX('+xpos+'px)',
				'left': 0,
				'top': $target.position().top+'px',
				'margin-left': marginLeft
			});
			$('#dropDownMenuBG').data("xpos", xpos);
			$target.css("margin-left", marginLeft);
//			console.log("test: "+$target.find('.nav_menu_sub0').outerHeight()+", "+$target.find('.nav_menu_sub1').outerHeight()+", "+$target.find('.nav_menu_sub2').outerHeight());
			$('#ddmbg_top').css({
				'height': ($target.find('.nav_menu_sub0').length ? $target.find('.nav_menu_sub0').outerHeight() : 0) +'px'
			});
			$('#ddmbg_mid').css({
				'height': ($target.find('.nav_menu_sub1').length ? $target.find('.nav_menu_sub1').outerHeight() : 0) +'px'
			});
			$('#ddmbg_bot').css({
				'height': ($target.find('.nav_menu_sub2').length ? $target.find('.nav_menu_sub2').outerHeight() : 0) +'px'
			});

		}

	}, function(){

		if ($(window).width() > 1099) {

			$('#dropDownMenuBG').css({
				'transform': 'translateX('+$('#dropDownMenuBG').data('xpos')+'px) rotate3d(0, 1, 0, 90deg)'
			});
			clearTimeout(ddActive);
			ddActive = setTimeout(function(){
				$(document.body).removeClass("ddActive");
				$(document.body).addClass("ddInactive");
				//alert("test "+$('#dropDownMenuBG').data("xpos"));
			}, 300);
			if (dim) $('.page_content').removeClass('dim');
			$('#dropDownMenuBG').removeClass("active");

			$target = $('#'+$(this).attr("id")+'_menu');
			$target.removeClass("active");

		}

	});

	$("#nav_all_label").attr("data-original-label", $("#nav_all_label").html());

/*
	//$("#nav_filters input").change(function(ev) {
	$(document).on('change', '#nav_filters input', function(ev) {
	//$("#nav_filters input").bind('change', function(ev) {
	//$("#nav_filters input").delegate('input[type="radio"]', 'change', function(ev) {
		if (ev.target.defaultValue == "all") {
			$("input[name='applications']:checked").prop('checked', false);
			$("input[name='substrates']:checked").prop('checked', false);
			$("input[name='finish']:checked").prop('checked', false);
			$("input[value='any']").prop('checked', true);
			$("#nav_all_label").html($("#nav_all_label").attr("data-original-label"));
			reset_nav_filters();
		} else {
	//		$('#nav_product_list a').addClass("choice");
			$("input[name='all']:checked").prop('checked', false);
			$("input[name='"+ev.target.defaultValue+"']:checked").prop('checked', true);
			$("#nav_all_label").html($("#nav_all_label").attr("data-original-label")+" / Reset");
			if ($(window).width() < 1100) {
		//		apply_nav_filters();
			} else {
				$('#filter_button > input').removeClass("dim");
				$('#filter_button > input').addClass("pulse");
			}
			//$('#filters_message').html('Filtered results appear on the right.<br />Try the <a href="product_finder.php">Product Finder</a> for more assistance.');
		}
		console.log($(this).val());
		ga('send', 'event', {
			eventCategory: 'NavFilters',
			eventAction: 'click',
			eventLabel: ev.target.defaultValue
		});
	});
	
	$("#filter_button > input").click(function(){
	//	apply_nav_filters();
	});
*/
/*	$(".scrollable").niceScroll({
		cursorcolor: "#00F",
		autohidemode: false,
		railalign: 'left',
		railvalign: 'bottom',
		horizrailenabled: false,
		cursorcolor: "rgba(0,0,0,0.3)",
		cursorwidth: '20px',
		cursorborder: '0px solid #000',
		cursorborderradius: 0
	});
	thumb = '<div class="scroll-thumb"><hr /><hr /><hr /></div>';
	$('.nicescroll-rails div').html(thumb);
	$("#ascrail2000").appendTo("#scrollable1");
	$("#ascrail2001").appendTo("#scrollable2");
	//$(".scrollable").getNiceScroll().hide();*/
	
/*	new ResizeSensor(jQuery('#search'), function() {
		$("#scrollable2").getNiceScroll().resize();
	});*/
	
	/*$('<div id="show_filters">Show Filters</div>').appendTo('.nav-menu-products .menu_container');
	$('#show_filters').click(function() {
		$('.nav-menu-products .menu_container').toggleClass("open");
		$(this).html($('.nav-menu-products .menu_container').hasClass("open")?"Hide Filters":"Show Filters");
		$('#nav_products .submenu').toggleClass('dimmed');
	});*/
	
	//if ($(document.body).hasClass("no-touch")) {
	
		$('.has_submenu > .a').css("cursor", "pointer");
		$(document).on('click', '.has_submenu > .a', function(ev) {
			var clicked = $(this);
			//while (!clicked.hasClass("a")) { clicked = $(this).parent(); }
		//console.log("click event triggered: #"+clicked.parent().attr("id"));
			ev.preventDefault();
		
			if ($(window).width() < 1100) {
				close = clicked.parent().hasClass("hover") ? true : false;
				$("#main_nav > ul > li").removeClass("hover");
				//if (!$('#main_nav > ul').hasClass("open")) {
					if (!close) { $(document.body).addClass("clip"); } else $(document.body).removeClass("clip");
				//}
				if (!close) clicked.parent().addClass("hover");
				//if ($(document.body).hasClass("no-touch")) 
	//			$(".scrollable").getNiceScroll().resize();
			} else {
		
				$("#main_nav > ul > li").removeClass("hover");
				$(document.body).removeClass("clip");
		
			}
		
		});
		
		/*$('.has_submenu').click(function(ev) {
			ev.preventDefault();
			if ($(window).width() > 1099) {
//			alert("test");
				$(this).toggleClass("hover");
				//$(".scrollable").getNiceScroll().show();
				$(".scrollable").getNiceScroll().resize();
				//$(".scrollable").getNiceScroll().hide();
			}
		});*/
	
	/*} else {
	
		$('.has_submenu > .a').touchstart(function(ev) {
			ev.preventDefault();
			close = clicked.parent().hasClass("hover") ? true : false;
			$("#main_nav > ul > li").removeClass("hover");
			if (!close) { $(document.body).addClass("clip"); } else $(document.body).removeClass("clip");
			if (!close) clicked.parent().addClass("hover");
		});
	
	}*/

	

	$('.nav_click .submenu').append('<div class="nav_close"><span>Close</span></div>');
	$('.nav_close').click(function(){
		//$(".scrollable").getNiceScroll().hide();
		$('.has_submenu').removeClass("hover");
		$(document.body).removeClass("clip");
	});
	
	$(".submenu").scroll(function() {
		$(".submenu .text-section").css("margin-top", $(this).scrollTop()+"px");
		$(".submenu .nav_close").css("margin-top", $(this).scrollTop()+"px");
	});
	
	handle_search();

});

window.onbeforeunload = function() {

	$('#dropDownMenuBG').removeClass("active");
	$('#dropDownMenuBG').attr("style","");
	//$('#dropDownMenuBG').css("display", "none");

};

document.body.addEventListener("unload", function() {

	$('#dropDownMenuBG').removeClass("active");
	$('#dropDownMenuBG').attr("style","");
	//$('#dropDownMenuBG').css("display", "none");

});

function handle_search() {
	
	if ($('td.gsc-search-button').length) {
		$('td.gsc-search-button').hover(function(){
			$('td.gsc-input').addClass("active");
		}, function(){
			$('td.gsc-input').removeClass("active");
		});
		$('td.gsc-search-button').click(function(){
			$('td.gsc-input').removeClass("active");
		});
	} else setTimeout('handle_search();', 100);

}

function apply_nav_filters() {
/*
	nav_product_filter_new($("input[name='applications']:checked").val(), "applications");
	nav_product_filter_new($("input[name='substrates']:checked").val(), "substrates");
	nav_product_filter_new($("input[name='finish']:checked").val(), "finish");
	
	if ($("input[value='any']:checked").length > 2) {
		$('#nav_filters_reset').html('');
	} else $('#nav_filters_reset').html('<a href="javascript:reset_nav_filters();">Reset Filters</a>');

	$('#filter_button > input').removeClass("pulse");
	$('#filter_button > input').addClass("dim");
	
	if ($('#nav_product_list a.choice').length < 1) {
		$('#nav_product_error').html('<p>Sorry, there are no products matching the current filter settings.</p><p>Would you like to <a href="javascript:reset_nav_filters();">reset the filters</a>?</p>');
		$('#nav_product_error').addClass("error");
	} else {
		$('#nav_product_error').html('');
		$('#nav_product_error').removeClass("error");
	}
*/
}


function nav_product_filter_new(choice, list) {
/*
	if (choice) {
	
		if (choice != "any") {
			// manage list of products and update 'applications" text for filter
			//$('#nav_product_list a').attr("data-applications", "No applications advised for current filter.");
	
			$('#nav_product_list a').removeClass("hilite");
			$('#nav_product_list a').removeClass("hilite2");
			$('#nav_product_list a.choice').each(function(){
				$(this).removeClass("choice");
			
				// loop through json and hilite compatible options
				for (var i=0; i<categories[list][choice].length; i++) {
			
					if (categories[list][choice][i] == $(this).attr("data-model")) {
			
						$(this).addClass("choice");
					//	$(this).attr("data-applications",categories[list][choice][i]["applications"]);
			
					}
			
				}
		
				// hover for product info
				/*$(this).hover(function(){
					if ($(this).hasClass("dim") === false) {
						$('#nav_product_info .img').html('<img src="'+$(this).attr("data-image")+'" />');
						$('#nav_product_info .name').html($(this).html());
						$('#nav_product_info .applications').html($(this).attr("data-applications"));
						$('#nav_product_info .finish').html($(this).attr("data-finish"));
					}
				}, function(){
					if ($(this).hasClass("dim") === false) {
						$('#nav_product_info .img').html(originalhtml["nav_product_img"]);
						$('#nav_product_info .name').html(originalhtml["nav_product_name"]);
						$('#nav_product_info .applications').html(originalhtml["nav_product_apps"]);
						$('#nav_product_info .finish').html(originalhtml["nav_product_finish"]);
					}
				});* /
		
			});
		
		}
	
		// dim non-compatible options
		$('#nav_product_list a').addClass("dim");
		$('#nav_product_list a.choice').each(function(){
			if ($(this).attr("data-original-href") > "") $(this).attr("href", $(this).attr("data-original-href"));
		});
		$('#nav_product_list a.choice').removeClass("dim");

// garish hilite - don't like this!
//		$('#nav_product_list a.choice').addClass("hilite");
//		$('#nav_product_list a.choice').addClass("hilite2");
//		setTimeout("$('#nav_product_list a.choice').removeClass('hilite');", 1800);

		$('#nav_product_list a.dim').each(function(){
			$(this).attr("href", "javascript:void(0);");
		});

// dim input controls - don't like this, either!
//		$("#nmt_"+list+" label").addClass("dim");
//		$(".menu_tier input[name="+list+"]:checked").parent().removeClass("dim");
	
	//	$('.tier1 li').each(function(){ $('#'+$(this).attr("id")+' span').html($(this).attr("data-original"))});
		//$('#nmt_'+list+' span').html(choice.replace("__","/").replace("_"," "));
	
		// update header
		//$('#product_list_h4').html(choice.replace("__","/").replace("_"," ")+" Products");
		//$('#product_list_h4').html("Filtered Product Options");

		ga('send', 'event', {
			eventCategory: 'NavFiltersApply',
			eventAction: 'click',
			eventLabel: list+" "+choice
		});
	}*/
	
}

function reset_nav_filters(){
/*
//	$('.tier1 li').each(function(){ $('#'+$(this).attr("id")+' span').html($(this).attr("data-original"))});
	$('#nav_product_list a').addClass("choice");
	$('#nav_product_list a').removeClass("dim");
	$('#nav_product_list a').removeClass("hilite2");
	$('#nav_product_list a').removeClass("hilite");
	$('#nav_product_list a.choice').each(function(){
		if ($(this).attr("data-original-href") > "") $(this).attr("href", $(this).attr("data-original-href"));
	});
	$(".menu_tier input").parent().removeClass("dim");
	$('#nav_product_error').html('');
	$('#nav_product_error').removeClass("error");
	$("input[value='any']").prop('checked', true);
	$('#nav_filters_reset').html('');
	/*
	$('#nav_product_list a').each(function(){ $(this).attr("data-applications", product_specs[$(this).attr("data-model")])});
	$('#product_list_h4').html("All Products");
	$('#nav_menu_tiers > ul > li').removeClass("active");
	$('#nav_menu_tiers .tier2').removeClass("active");
	$('#nmt_all').addClass("active");*/

	ga('send', 'event', {
		eventCategory: 'NavFiltersApply',
		eventAction: 'click',
		eventLabel: "all"
	});
}




function nav_product_list(list) {

	if (!$('#nmt_'+list+'_list').hasClass("active")) {
	
		$('#nav_menu_tiers ul.tier2').removeClass("active"); // aka id "nmt_{name}_list"
		
		// actual menu buttons
		$('#nav_menu_tiers > ul > li').removeClass("active");
		$('#nmt_'+list).addClass("active");
	
		var html = '';
		
		// create menu header from button -- kinda sloppy but whatever.
		html += '<li class="clickable type_any selected"><svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 61.8 62.7" style="enable-background:new 0 0 61.8 62.7;" xml:space="preserve">'+$('#nmt_'+list+' svg').html()+'</svg>Any '+$('#nmt_'+list).attr("data-original")+'</li>';
		
		// build menu from json
		for (var key in categories[list]) {
			if (!categories[list].hasOwnProperty(key)) continue; // skip loop if the property is from prototype
		
			html += '<li class="clickable type_'+key+'" onclick="nav_product_filter(\''+key+'\',\''+list+'\')">'+key.replace("__","/").replace("_"," ");
		
		}
		$('#nmt_'+list+'_list').html(html);
		
		// open menu
		$('#nmt_'+list+'_list').addClass("active");
		
	} else $('#nmt_'+list+'_list').removeClass("active"); // toggle menu closed if open

}



/**
 * Copyright Marc J. Schmidt. See the LICENSE file at the top-level
 * directory of this distribution and at
 * https://github.com/marcj/css-element-queries/blob/master/LICENSE.
 */
;
(function (root, factory) {
    if (typeof define === "function" && define.amd) {
        define(factory);
    } else if (typeof exports === "object") {
        module.exports = factory();
    } else {
        root.ResizeSensor = factory();
    }
}(this, function () {

    // Only used for the dirty checking, so the event callback count is limted to max 1 call per fps per sensor.
    // In combination with the event based resize sensor this saves cpu time, because the sensor is too fast and
    // would generate too many unnecessary events.
    var requestAnimationFrame = window.requestAnimationFrame ||
        window.mozRequestAnimationFrame ||
        window.webkitRequestAnimationFrame ||
        function (fn) {
            return window.setTimeout(fn, 20);
        };

    /**
     * Iterate over each of the provided element(s).
     *
     * @param {HTMLElement|HTMLElement[]} elements
     * @param {Function}                  callback
     */
    function forEachElement(elements, callback){
        var elementsType = Object.prototype.toString.call(elements);
        var isCollectionTyped = ('[object Array]' === elementsType
            || ('[object NodeList]' === elementsType)
            || ('[object HTMLCollection]' === elementsType)
            || ('undefined' !== typeof jQuery && elements instanceof jQuery) //jquery
            || ('undefined' !== typeof Elements && elements instanceof Elements) //mootools
        );
        var i = 0, j = elements.length;
        if (isCollectionTyped) {
            for (; i < j; i++) {
                callback(elements[i]);
            }
        } else {
            callback(elements);
        }
    }

    /**
     * Class for dimension change detection.
     *
     * @param {Element|Element[]|Elements|jQuery} element
     * @param {Function} callback
     *
     * @constructor
     */
    var ResizeSensor = function(element, callback) {
        /**
         *
         * @constructor
         */
        function EventQueue() {
            var q = [];
            this.add = function(ev) {
                q.push(ev);
            };

            var i, j;
            this.call = function() {
                for (i = 0, j = q.length; i < j; i++) {
                    q[i].call();
                }
            };

            this.remove = function(ev) {
                var newQueue = [];
                for(i = 0, j = q.length; i < j; i++) {
                    if(q[i] !== ev) newQueue.push(q[i]);
                }
                q = newQueue;
            }

            this.length = function() {
                return q.length;
            }
        }

        /**
         * @param {HTMLElement} element
         * @param {String}      prop
         * @returns {String|Number}
         */
        function getComputedStyle(element, prop) {
            if (element.currentStyle) {
                return element.currentStyle[prop];
            } else if (window.getComputedStyle) {
                return window.getComputedStyle(element, null).getPropertyValue(prop);
            } else {
                return element.style[prop];
            }
        }

        /**
         *
         * @param {HTMLElement} element
         * @param {Function}    resized
         */
        function attachResizeEvent(element, resized) {
            if (!element.resizedAttached) {
                element.resizedAttached = new EventQueue();
                element.resizedAttached.add(resized);
            } else if (element.resizedAttached) {
                element.resizedAttached.add(resized);
                return;
            }

            element.resizeSensor = document.createElement('div');
            element.resizeSensor.className = 'resize-sensor';
            var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;';
            var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';

            element.resizeSensor.style.cssText = style;
            element.resizeSensor.innerHTML =
                '<div class="resize-sensor-expand" style="' + style + '">' +
                    '<div style="' + styleChild + '"></div>' +
                '</div>' +
                '<div class="resize-sensor-shrink" style="' + style + '">' +
                    '<div style="' + styleChild + ' width: 200%; height: 200%"></div>' +
                '</div>';
            element.appendChild(element.resizeSensor);

            if (getComputedStyle(element, 'position') == 'static') {
                element.style.position = 'relative';
            }

            var expand = element.resizeSensor.childNodes[0];
            var expandChild = expand.childNodes[0];
            var shrink = element.resizeSensor.childNodes[1];

            var reset = function() {
                expandChild.style.width  = 100000 + 'px';
                expandChild.style.height = 100000 + 'px';

                expand.scrollLeft = 100000;
                expand.scrollTop = 100000;

                shrink.scrollLeft = 100000;
                shrink.scrollTop = 100000;
            };

            reset();
            var dirty = false;

            var dirtyChecking = function() {
                if (!element.resizedAttached) return;

                if (dirty) {
                    element.resizedAttached.call();
                    dirty = false;
                }

                requestAnimationFrame(dirtyChecking);
            };

            requestAnimationFrame(dirtyChecking);
            var lastWidth, lastHeight;
            var cachedWidth, cachedHeight; //useful to not query offsetWidth twice

            var onScroll = function() {
              if ((cachedWidth = element.offsetWidth) != lastWidth || (cachedHeight = element.offsetHeight) != lastHeight) {
                  dirty = true;

                  lastWidth = cachedWidth;
                  lastHeight = cachedHeight;
              }
              reset();
            };

            var addEvent = function(el, name, cb) {
                if (el.attachEvent) {
                    el.attachEvent('on' + name, cb);
                } else {
                    el.addEventListener(name, cb);
                }
            };

            addEvent(expand, 'scroll', onScroll);
            addEvent(shrink, 'scroll', onScroll);
        }

        forEachElement(element, function(elem){
            attachResizeEvent(elem, callback);
        });

        this.detach = function(ev) {
            ResizeSensor.detach(element, ev);
        };
    };

    ResizeSensor.detach = function(element, ev) {
        forEachElement(element, function(elem){
            if(elem.resizedAttached && typeof ev == "function"){
                elem.resizedAttached.remove(ev);
                if(elem.resizedAttached.length()) return;
            }
            if (elem.resizeSensor) {
                if (elem.contains(elem.resizeSensor)) {
                    elem.removeChild(elem.resizeSensor);
                }
                delete elem.resizeSensor;
                delete elem.resizedAttached;
            }
        });
    };

    return ResizeSensor;

}));


(function(h,o,t,j,a,r){
	h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};
	h._hjSettings={hjid:779666,hjsv:6};
	a=o.getElementsByTagName('head')[0];
	r=o.createElement('script');r.async=1;
	r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;
	a.appendChild(r);
})(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');